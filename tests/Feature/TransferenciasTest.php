<?php

namespace Tests\Feature;

use App\Entities\Transferencia;
use App\Enum\EnumMensagensDeErro;
use App\Exceptions\TransferenciaException;
use App\Helpers\HelpersFile;
use App\Http\Services\ServicesTransferencia;

use Illuminate\Http\Response;
use Tests\TestCase;

class TransferenciasTest extends TestCase
{
    protected Transferencia | null $Transferencia;
    protected array | null $jsonBase;

    protected ServicesTransferencia | null $ServicesTransferencia;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->Transferencia = new Transferencia();

        $this->jsonBase = json_decode(HelpersFile::getConteudoArquivo("tests/Json/JsonTransferenciaBase.json"), true);

        $this->ServicesTransferencia = app(ServicesTransferencia::class);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $this->Transferencia = null;

        $this->jsonBase = null;

        $this->ServicesTransferencia = null;

    }

    public function testCriarObjetoTransferencia()
    {
        $this->Transferencia->elaborarObjeto($this->jsonBase["transferencias"][0]);

        $this->assertFalse($this->Transferencia->infoError());
        $this->assertEmpty($this->Transferencia->infoMessageErro());

        $this->assertNotNull($this->Transferencia->infoValor());

        $this->assertGreaterThan(0, $this->Transferencia->infoValor());
    }

    public function testObjetoTransferenciaComValorZerado()
    {
        $this->jsonBase["transferencias"][0]["valor"] = 0;

        $this->Transferencia->elaborarObjeto($this->jsonBase["transferencias"][0]);

        $this->assertTrue($this->Transferencia->infoError());
        $this->assertNotEmpty($this->Transferencia->infoMessageErro());
    }

    public function testCriarJsonResponse()
    {
        $this->Transferencia->elaborarObjeto($this->jsonBase["transferencias"][0]);

        $resultJson = $this->Transferencia->jsonSerialize();

        $this->assertJson($resultJson);

        $this->assertNotEmpty($resultJson);
        $this->assertNotNull($resultJson);
    }

    public function testCriarListaDeTransferencias()
    {
        $result = $this->ServicesTransferencia->criarListaDeTransferencia($this->jsonBase);

        $this->assertIsArray($result);

        $this->assertArrayHasKey("transferencias", $result);
        $this->assertGreaterThan(0, count($result["transferencias"]));

        $this->assertArrayHasKey("valorTotal", $result);
        $this->assertIsNumeric($result["valorTotal"]);
        $this->assertNotNull($result["valorTotal"]);
        $this->assertNotEmpty($result["valorTotal"]);

    }

    public function testInformarExceptionAoCriarListaDeTransferencias()
    {
        $this->jsonBase["transferencias"][0]["valor"] = 0;

        $this->expectException(TransferenciaException::class);
        $this->expectExceptionCode(Response::HTTP_BAD_REQUEST);

        $this->ServicesTransferencia->criarListaDeTransferencia($this->jsonBase);
    }

    public function testValidarSaldoDisponivel()
    {
        auth()->loginUsingId(10);

        $result = $this->ServicesTransferencia->validarSaldoDisponivel(1337);

        $this->assertIsBool($result);
        $this->assertTrue($result);

        $this->assertNotEmpty($result);
        $this->assertNotNull($result);
    }
    public function testReceberExceptionAoValidarSaldoDisponivel()
    {
        auth()->loginUsingId(10);

        $this->expectException(TransferenciaException::class);
        $this->expectExceptionCode(Response::HTTP_CONFLICT);
        $this->expectExceptionMessage(EnumMensagensDeErro::SALDO_INSUFICIENTE->value);

        $this->ServicesTransferencia->validarSaldoDisponivel(999999.99);
    }
}
